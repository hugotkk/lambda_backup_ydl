AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: This stack manages the download and upload of YouTube videos to an S3 bucket, and the parsing of YouTube playlist URLs to send them to an SQS queue. It consists of two Lambda functions, an S3 bucket, and an SQS queue.

Resources:

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: youtube-video-downloads-20230805
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  MySQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: youtube-playlist-queue-20230805
      VisibilityTimeout: 300 # 5 minutes
      KmsMasterKeyId: alias/aws/sqs
      KmsDataKeyReusePeriodSeconds: 300 # 5 minutes

  SendToSQSLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Path: /
      Policies:
        - PolicyName: SendToSQSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueUrl'
                Resource: !GetAtt MySQSQueue.Arn
        - PolicyName: LambdaCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  DownloadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Path: /
      Policies:
        - PolicyName: LambdaSQSReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource: !GetAtt MySQSQueue.Arn # Reference to the ARN of your SQS queue
        - PolicyName: LambdaCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: S3UploadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:CreateMultipartUpload
                  - s3:AbortMultipartUpload
                  - s3:ListMultipartUploadParts
                  - s3:ListBucketMultipartUploads
                Resource: 
                  - !Sub arn:aws:s3:::${MyS3Bucket}/*
                  - !Sub arn:aws:s3:::${MyS3Bucket}

  DownloadYouTubeVideoFunction:
    Type: AWS::Serverless::Function 
    Properties:
      MemorySize: 1024
      EphemeralStorage:
        Size: 1024
      Role: !GetAtt DownloadLambdaExecutionRole.Arn
      Tracing: Active # Enable X-Ray tracing
      CodeUri: download_youtube_video
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 300 # 5 minutes
      Environment: 
        Variables:
          BUCKET_NAME: !Ref MyS3Bucket
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt MySQSQueue.Arn
            BatchSize: 1

  SendPlaylistToSQSFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Role: !GetAtt SendToSQSLambdaExecutionRole.Arn
      Tracing: Active # Enable X-Ray tracing
      CodeUri: send_playlist_to_sqs
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 300 # 5 minutes
      Environment: 
        Variables:
          QUEUE_NAME: !GetAtt MySQSQueue.QueueName
